## By Sean Higgins on 2/27/2023
##the basic code structure was provided by denny wright
## the purpose on this code is to make calls to our sandbox switches, return data and print it out in a nice format

## these are the requirede import modules
import requests
import json

##
def getOSPFNeighbor(mgmtIPAddress):
#This code is mostly generated by the NXOSAPI and gets a dictionary of OSPF neighbors.
#The dictionary (response) should be returned from this function to be used by the print function.
#mgmtIP is received  from for loop below and modifys the URL so that the code can be run on whatever deviceâ€™s IP is received
    
    switchuser='cisco'
    switchpassword='cisco'

    url='https://' + mgmtIP +'/ins'
    myheaders={'content-type':'application/json-rpc'}
    payload=[
      {
        "jsonrpc": "2.0",
        "method": "cli",
        "params": {
          "cmd": "show ip ospf nei",
          "version": 1
        },
        "id": 1
      }
    ]
    response = requests.post(url,data=json.dumps(payload), verify = False,headers=myheaders,auth=(switchuser,switchpassword)).json()
    return response


## in the printout function i converted the response from the previous function into newDict for ease of printing
## it then prints it out in an easy to read format
def printOSPFNeighbor(OSPF_Neighbor_dict) :
    print("router-ID" + '\t' + "Neighbor IP" + '\t' + "Int")
    print("-" * 70)
    newDict = OSPF_Neighbor_dict["result"]["body"]['TABLE_ctx']['ROW_ctx']['TABLE_nbr']['ROW_nbr']
    print(newDict[0]['rid'] + '\t' + newDict[0]['addr'] + '\t' + newDict[0]['intf'])
    print(newDict[1]['rid'] + '\t' + newDict[1]['addr'] + '\t' + newDict[1]['intf'])


 
## this is the dictionary that we are getting information from to make calls with

devices = {
    "dist-sw01" : {
        "hostname" : "dist-sw01",
        "deviceType" : "switch",
        "mgmtIP" : "10.10.20.177"
        },
    "dist-sw02" : {
        "hostname" : "dist-sw02",
        "deviceType" : "switch",
        "mgmtIP" : "10.10.20.178"
        }
}


## the for loop is what calls our functions above with information taken from our dictionary
## i couldnt find another way to pull the mgmtIP from the
## nested dictionary other than this while loop.

for device in devices:
    count = 0
    while count == 0:
        mgmtIP = devices["dist-sw01"]["mgmtIP"]
        OSPF_Neighbor = getOSPFNeighbor(mgmtIP)
        print(devices["dist-sw01"]["hostname"])
        printOSPFNeighbor(OSPF_Neighbor)
        count += 1
        if count == 1:
            mgmtIP = devices["dist-sw02"]["mgmtIP"]
            OSPF_Neighbor = getOSPFNeighbor(mgmtIP)
            print(devices["dist-sw02"]["hostname"])
            printOSPFNeighbor(OSPF_Neighbor)


